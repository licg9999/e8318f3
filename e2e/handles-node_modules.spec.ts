import fs from 'node:fs';

import { noop } from 'lodash';

import {
  encodingText,
  evaluateMustHavePackageJsonText,
  execNode,
  execWebpack,
  expectCommonDirToIncludeAllFilesAnd,
  expectCommonDirToIncludeSameFilesAnd,
  rootPath,
  setupWebpackProject,
} from '../support-helpers';

const webpackConfigReusable = `
mode: 'production',
target: 'node',
output: {
  path: __dirname + '/dist'
},
`;

function useSubEntry(subEntryName: string, topEntryFile: string = 'src/index.js'): void {
  fs.writeFileSync(topEntryFile, `import './${subEntryName}';`, encodingText);
}

describe('with deps directly imported from node_modules', () => {
  it(
    'with hoistNodeModules as true, ' +
      'outputs files outside node_modules relative to the longest common dir of them, ' +
      'outputs files in node_modules to node_modules just under the output dir, ' +
      'correctly resolves files in the output node_modules',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [
    new Plugin({
      hoistNodeModules: true,
    })
  ],
};
`,
        'src/index.js': `
import { upperCase } from 'lodash';
console.log(upperCase('Hi, there!'));
`,
        'package.json': evaluateMustHavePackageJsonText({
          ['dependencies']: {
            ['lodash']: '^4.17.21',
          },
        }),
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFilesAnd({
        'dist/index.js': (t) =>
          expect(t).toIncludeMultiple(['require("./node_modules/lodash/lodash.js")', 'Hi, there!']),
        'dist/node_modules/lodash/lodash.js': noop,
        'dist/node_modules/lodash/lodash.js.LICENSE.txt': noop,
      });
      const { status, stdout } = execNode('dist/index.js');
      expect(status).toBe(0);
      expect(stdout).toInclude('HI THERE');
    }
  );

  it(
    'with hoistNodeModules as false, ' +
      'outputs files relative to the longest common dir of all files ' +
      'including those inside node_modules',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [
    new Plugin({
      hoistNodeModules: false,
    })
  ],
};
`,
        'src/index.js': `
import { upperCase } from 'lodash';
console.log(upperCase('Hi, there!'));
`,
        'package.json': evaluateMustHavePackageJsonText({
          ['dependencies']: {
            ['lodash']: '^4.17.21',
          },
        }),
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFilesAnd({
        'dist/src/index.js': (t) =>
          expect(t).toIncludeMultiple([
            'require("../node_modules/lodash/lodash.js")',
            'Hi, there!',
          ]),
        'dist/node_modules/lodash/lodash.js': noop,
        'dist/node_modules/lodash/lodash.js.LICENSE.txt': noop,
      });
      const { status, stdout } = execNode('dist/src/index.js');
      expect(status).toBe(0);
      expect(stdout).toInclude('HI THERE');
    }
  );

  it(
    'with preferResolveByDependencyAsCjs as true, ' +
      'resolves files in node_modules by CommonJS exports ignoring type of import statement',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [
    new Plugin({
      preferResolveByDependencyAsCjs: true,
    }),
  ],
};
`,
        'src/withEsmImport.js': `
import { green } from 'colorette';
console.log(green('Hi, there!'));
`,
        'src/withCjsImport.js': `
const { green } = require('colorette');
console.log(green('Hi, there!'));
`,
        'package.json': evaluateMustHavePackageJsonText({
          ['dependencies']: {
            ['colorette']: '^2.0.19',
          },
        }),
      });

      for (const subEntryName of ['withEsmImport', 'withCjsImport']) {
        try {
          fs.rmSync('dist', { recursive: true });
        } catch {}
        useSubEntry(subEntryName);
        expect(execWebpack().status).toBe(0);
        expectCommonDirToIncludeSameFilesAnd({
          'dist/index.js': noop,
          [`dist/${subEntryName}.js`]: (t) =>
            expect(t).toIncludeMultiple([
              'require("./node_modules/colorette/index.cjs")',
              'Hi, there!',
            ]),
          'dist/node_modules/colorette/index.cjs': noop,
        });
        const { status, stdout } = execNode('dist/index.js');
        expect(status).toBe(0);
        expect(stdout).toInclude('Hi, there!');
      }
    }
  );

  it(
    'with preferResolveByDependencyAsCjs as false, ' +
      'resolves files in node_modules according to type of import statement',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [
    new Plugin({
      preferResolveByDependencyAsCjs: false,
    }),
  ],
};
`,
        'src/withEsmImport.js': `
import { green } from 'colorette';
console.log(green('Hi, there!'));
`,
        'src/withCjsImport.js': `
const { green } = require('colorette');
console.log(green('Hi, there!'));
`,
        'package.json': evaluateMustHavePackageJsonText({
          ['dependencies']: {
            ['colorette']: '^2.0.19',
          },
        }),
      });

      subCaseWithEsmImport();
      subCaseWithCjsImport();

      function subCaseWithEsmImport() {
        try {
          fs.rmSync('dist', { recursive: true });
        } catch {}
        useSubEntry('withEsmImport');
        expect(execWebpack().status).toBe(0);
        expectCommonDirToIncludeSameFilesAnd({
          'dist/index.js': noop,
          [`dist/withEsmImport.js`]: (t) =>
            expect(t).toIncludeMultiple([
              'require("./node_modules/colorette/index.js")',
              'Hi, there!',
            ]),
          'dist/node_modules/colorette/index.js': noop,
        });
        const { status, stdout } = execNode('dist/index.js');
        expect(status).toBe(0);
        expect(stdout).toInclude('Hi, there!');
      }

      function subCaseWithCjsImport() {
        try {
          fs.rmSync('dist', { recursive: true });
        } catch {}
        useSubEntry('withCjsImport');
        expect(execWebpack().status).toBe(0);
        expectCommonDirToIncludeSameFilesAnd({
          'dist/index.js': noop,
          [`dist/withCjsImport.js`]: (t) =>
            expect(t).toIncludeMultiple([
              'require("./node_modules/colorette/index.cjs")',
              'Hi, there!',
            ]),
          'dist/node_modules/colorette/index.cjs': noop,
        });
        const { status, stdout } = execNode('dist/index.js');
        expect(status).toBe(0);
        expect(stdout).toInclude('Hi, there!');
      }
    }
  );
});

describe('with loader helpers indirectly included from node_modules', () => {
  it('handles the included loader helpers in the same way as the imported deps', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  module: {
    rules: [
      {
        test: /\\.hbs$/,
        use: 'handlebars-loader',
      }
    ]
  },
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';
import testHbs from './test.hbs';

console.log(testHbs({ title: 'Hi, there!' }));
`,
      'src/test.hbs': `
<h1>{{title}}</h1>
`,
      'package.json': evaluateMustHavePackageJsonText({
        ['devDependencies']: {
          ['handlebars-loader']: '^1.7.2',
        },
      }),
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeAllFilesAnd({
      'dist/index.js': (t) => expect(t).toInclude('require("./test.hbs")'),
      'dist/test.hbs': noop,
      'dist/node_modules/handlebars/runtime.js': noop,
    });
    const { status, stdout } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('<h1>Hi, there!</h1>');
  });
});
