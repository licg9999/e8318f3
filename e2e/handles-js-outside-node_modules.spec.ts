import { noop } from 'lodash';
import fs from 'node:fs';
import waitForExpect from 'wait-for-expect';
import {
  encodingText,
  evaluateMustHavePackageJsonText,
  execNode,
  execWebpack,
  execWebpackAsync,
  expectCommonDirToIncludeAllFiles,
  expectCommonDirToIncludeSameFiles,
  expectCommonDirToIncludeSameFilesAnd,
  killExecAsyncProcess,
  rootPath,
  setupWebpackProject,
} from '../support-helpers';

const webpackConfigReusable = `
mode: 'production',
target: 'node',
output: {
  path: __dirname + '/dist',
},
`;

function useSubEntry(subEntryName: string, topEntryFile: string = 'src/index.js'): void {
  fs.writeFileSync(topEntryFile, `import './${subEntryName}';`, encodingText);
}

describe('with default options', () => {
  it(
    'evaluates new entries from single user specified entry and ' +
      'outputs them by relative paths to their longest common dir',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
        'src/index.js': `
import { greeting } from './constants';
console.log(greeting);
`,
        'src/constants.js': `
export const greeting = 'Hi, there!';
`,
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFilesAnd({
        'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
        'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
      });
      const { stdout, status } = execNode('dist/index.js');
      expect(status).toBe(0);
      expect(stdout).toInclude('Hi, there!');
    }
  );

  it('works with multiple user specified entries', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: {
    e1: './src/index.js',
    e2: './src/constants.js',
  },
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import { greeting } from './constants';
console.log(greeting);
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with multi-file user specified entry', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: {
    whatever: ['./src/index.js', './src/constants.js']
  },
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import { greeting } from './constants';
console.log(greeting);
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with externals', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  externals: {
    greeting: ['commonjs ../third_party/constants', 'greeting']
  },
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import greeting from 'greeting';
console.log(greeting);
`,
      'third_party/constants.js': `
exports.greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => {
        expect(t).toInclude('require("../third_party/constants');
        expect(t).not.toInclude('Hi, there!');
      },
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with resolve aliases', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './server/index.js',
  resolve: {
    alias: {
      '@client': __dirname + '/client',
    },
  },
  plugins: [new Plugin()],
};
      `,
      'server/index.js': `
import { greeting } from '@client/constants';
console.log(greeting);
`,
      'client/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/server/index.js': (t) => {
        expect(t).not.toInclude('Hi, there!');
        expect(t).toInclude('require("../client/constants.js")');
      },
      'dist/client/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/server/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with resource query', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js?t=1',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';
import { greeting } from './constants?u=0';

console.log(greeting);
assert.strictEqual(__resourceQuery, '?t=1');
`,
      'src/constants.js': `
import assert from 'node:assert';

export const greeting = 'Hi, there!';
assert.strictEqual(__resourceQuery, '?u=0');
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  for (const devtool of ['source-map', 'inline-source-map']) {
    it(`works with ${devtool}`, () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  devtool: '${devtool}',
  plugins: [new Plugin()],
};
`,
        'src/index.js': `
import { throwErrUnconditional } from './throw';
throwErrUnconditional();
`,
        'src/throw.js': `
export function throwErrUnconditional() {
  console.log('Something before err...');
  throw new Error('Some error happened');
}
`,
        'package.json': evaluateMustHavePackageJsonText({
          ['devDependencies']: {
            ['source-map-support']: '^0.5.21',
          },
        }),
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeAllFiles(['dist/index.js', 'dist/throw.js']);
      const { stdout, stderr, status } = execNode(
        '-r',
        'source-map-support/register',
        'dist/index.js'
      );
      expect(status).toBeGreaterThan(0);
      expect(stdout).toInclude('Something before err');
      expect(stderr).toIncludeMultiple([
        'Error',
        'Some error happened',
        'src/throw.js:4',
        'src/index.js:3',
      ]);
    });
  }

  it('works with watch mode', async () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import { greeting } from './constants';
console.log(greeting);
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    const webpackProc = execWebpackAsync('--watch');
    await waitForExpect(() => {
      expect(webpackProc.getStdoutAsString()).toIncludeRepeated('compiled successfully', 1);
    });
    expectCommonDirToIncludeSameFiles(['dist/index.js', 'dist/constants.js']);

    const newTextToLog = 'c0b6f254daf5f4cee4b3e01170b55d453c511589';
    fs.writeFileSync(
      'src/index.js',
      `
import { greeting } from './constants';
console.log(greeting, '(${newTextToLog})');
`
    );
    await waitForExpect(() => {
      expect(webpackProc.getStdoutAsString()).toIncludeRepeated('compiled successfully', 2);
    });
    expect(fs.readFileSync('dist/index.js', encodingText)).toIncludeMultiple([
      'greeting',
      newTextToLog,
    ]);

    await killExecAsyncProcess(webpackProc.pid!);

    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toIncludeMultiple(['Hi, there!', newTextToLog]);
  });

  it('works with plain import()', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import('./constants').then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with dynamic import()', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
const constFileName = 'greeting';
import(
  \`./constants/\${constFileName}\`
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/constants/greeting.js': `
export const greeting = 'Hi, there!';
`,
      'src/constants/farewell.js': `
export const farewell = 'Peace out.';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => {
        expect(t).toIncludeMultiple([
          'require("./constants/greeting.js")',
          'require("./constants/farewell.js")',
        ]);
        expect(t).not.toInclude('Hi, there!');
        expect(t).not.toInclude('Peace out.');
      },
      'dist/constants/greeting.js': (t) => expect(t).toInclude('Hi, there!'),
      'dist/constants/farewell.js': (t) => expect(t).toInclude('Peace out.'),
    });
    const { status, stdout } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with magic comment inlined import()', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/withIgnore.js': `
import(
  /* webpackIgnore: true */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withChunkName.js': `
import(
  /* webpackChunkName: 'some-chunk-name' */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withModeEager.js': `
import(
  /* webpackMode: 'eager' */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withPrefetch.js': `
import(
  /* webpackPrefetch: true */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withPreload.js': `
import(
  /* webpackPreload: true */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withInclude.js': `
const constFileName = 'greeting';
import(
  /* webpackInclude: /(greeting|farewell)\\.js$/ */
  \`./constants/\${constFileName}\`
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withExclude.js': `
const constFileName = 'greeting';
import(
  /* webpackExclude: /excuseme\\.js$/ */
  \`./constants/\${constFileName}\`
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/withExports.js': `
import(
  /* webpackExports: ['default'] */
  './constants/greeting'
).then(({ greeting }) => {
  console.log(greeting);
});
`,
      'src/constants/greeting.js': `
export const greeting = 'Hi, there!';
`,
      'src/constants/farewell.js': `
export const farewell = 'Peace out.';
`,
      'src/constants/excuseme.js': `
export const excuseme = 'Excuse me.';
`,
    });

    subCaseWithIgnore();
    subCasesWithIncludeExclude();
    subCasesMakingNoDifference();

    function subCaseWithIgnore() {
      try {
        fs.rmSync('dist', { recursive: true });
      } catch {}
      useSubEntry('withIgnore');
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFilesAnd({
        'dist/index.js': noop,
        'dist/withIgnore.js': (t) => {
          expect(t).not.toInclude('require("./constants/greeting.js")');
          expect(t).not.toInclude('Hi, there!');
        },
      });
      const { status, stderr } = execNode('dist/index.js');
      expect(status).toBeGreaterThan(0);
      expect(stderr).toInclude('MODULE_NOT_FOUND');
    }

    function subCasesWithIncludeExclude() {
      for (const subEntryName of ['withInclude', 'withExclude']) {
        try {
          fs.rmSync('dist', { recursive: true });
        } catch {}
        useSubEntry(subEntryName);
        expect(execWebpack().status).toBe(0);
        expectCommonDirToIncludeSameFilesAnd({
          'dist/index.js': noop,
          [`dist/${subEntryName}.js`]: (t) => {
            expect(t).toIncludeMultiple([
              'require("./constants/greeting.js")',
              'require("./constants/farewell.js")',
            ]);
            expect(t).not.toInclude('Hi, there!');
            expect(t).not.toInclude('Peace out.');
            expect(t).not.toInclude('require("./constants/excuseme.js")');
          },
          'dist/constants/greeting.js': (t) => expect(t).toInclude('Hi, there!'),
          'dist/constants/farewell.js': (t) => expect(t).toInclude('Peace out.'),
        });
        const { status, stdout } = execNode('dist/index.js');
        expect(status).toBe(0);
        expect(stdout).toInclude('Hi, there!');
      }
    }

    function subCasesMakingNoDifference() {
      for (const subEntryName of [
        'withChunkName',
        'withModeEager',
        'withPrefetch',
        'withPreload',
        'withExports',
      ]) {
        try {
          fs.rmSync('dist', { recursive: true });
        } catch {}
        useSubEntry(subEntryName);
        expect(execWebpack().status).toBe(0);
        expectCommonDirToIncludeSameFilesAnd({
          'dist/index.js': noop,
          [`dist/${subEntryName}.js`]: (t) => expect(t).not.toInclude('Hi, there!'),
          'dist/constants/greeting.js': (t) => expect(t).toInclude('Hi, there!'),
        });
        const { status, stdout } = execNode('dist/index.js');
        expect(status).toBe(0);
        expect(stdout).toInclude('Hi, there!');
      }
    }
  });

  it('works with require.ensure()', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
require.ensure(['./constants'], () => {
  const { greeting } = require('./constants');
  console.log(greeting);
});
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with AMD require/define', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
require(['./constants'], ({ greeting }) => {
  console.log(greeting);
});
`,
      'src/constants.js': `
define([], () => ({
  greeting: 'Hi, there!'
}));
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with require/exports', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
const { greeting } = require('./constants');
console.log(greeting);
`,
      'src/constants.js': `
exports.greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toInclude('Hi, there!'),
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    const { stdout, status } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });

  it('works with require.resolve/__webpack_modules__', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';

assert.strictEqual(Boolean(__webpack_modules__[require.resolve('./constants')]), true);
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });

    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => {
        expect(t).toInclude('require("./constants.js")');
        expect(t).not.toInclude('Hi, there!');
      },
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    expect(execNode('dist/index.js').status).toBe(0);
  });

  it('works with require.resolveWeak/__webpack_modules__', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';

assert.strictEqual(Boolean(__webpack_modules__[require.resolveWeak('./constants')]), false);
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });

    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => {
        expect(t).not.toInclude('require("./constants.js")');
        expect(t).not.toInclude('Hi, there!');
      },
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    expect(execNode('dist/index.js').status).toBe(0);
  });

  it('works with require.include/require.resolveWeak/__webpack_modules__', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';

require.include('./constants');

assert.strictEqual(Boolean(__webpack_modules__[require.resolveWeak('./constants')]), true);
`,

      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => {
        expect(t).toInclude('require("./constants.js")');
        expect(t).not.toInclude('Hi, there!');
      },
      'dist/constants.js': (t) => expect(t).toInclude('Hi, there!'),
    });
    expect(execNode('dist/index.js').status).toBe(0);
  });

  it('works with require.context', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
const requireConstant = require.context('./constants');
console.log(requireConstant('./a').a);
console.log(requireConstant('./b').b);
`,
      'src/constants/a.js': `
export const a = 'Hi, A!';
`,
      'src/constants/b.js': `
export const b = 'Hi, B!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/index.js': (t) => expect(t).not.toIncludeAnyMembers(['Hi, A!', 'Hi, B!']),
      'dist/constants/a.js': (t) => expect(t).toInclude('Hi, A!'),
      'dist/constants/b.js': (t) => expect(t).toInclude('Hi, B!'),
    });
    const { status, stdout } = execNode('dist/index.js');
    expect(status).toBe(0);
    expect(stdout).toIncludeMultiple(['Hi, A!', 'Hi, B!']);
  });

  it('works with node globals', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [new Plugin()],
};
`,
      'src/index.js': `
import assert from 'node:assert';
import path from 'node:path';

assert.strictEqual(__dirname, path.resolve('dist'));
assert.strictEqual(__filename, path.resolve('dist/index.js'));
`,
    });
    expect(execWebpack().status).toBe(0);
    expect(execNode('dist/index.js').status).toBe(0);
  });

  it('works with __webpack_...__ variables', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable.replace(
    /output:\s*\{([^\}]*)\}/s,
    `output: {
  $1
  publicPath: '/public/',
}`
  )}
  entry: ['./src/index.js', './src/texts.js'],
  plugins: [new Plugin()]
};
`,
      'src/index.js': `
import assert from 'node:assert';

assert.strictEqual(__webpack_public_path__, '/public/');

assert.strictEqual(__webpack_is_included__('./constants'), true);
assert.strictEqual(__webpack_require__(require.resolve('./constants')).greeting, 'Hi, there!');

assert.strictEqual(__webpack_is_included__('./texts'), false);
assert.strictEqual(__non_webpack_require__('./texts').farewell, 'Peace out.');

for(const v of [
  __webpack_base_uri__,
  __webpack_chunk_load__,
  __webpack_exports_info__,
  __webpack_get_script_filename__,
  __webpack_hash__,
  __webpack_modules__,
  __webpack_runtime_id__
]) {
  assert.strictEqual(Boolean(v), true)
}
`,
      'src/constants.js': `
export const greeting = 'Hi, there!';
`,
      'src/texts.js': `
export const farewell = 'Peace out.';
`,
    });
    expect(execWebpack().status).toBe(0);
    expect(execNode('dist/index.js').status).toBe(0);
  });
});

describe('with options.exclude', () => {
  it('excludes but correctly resolves the excluded in the output', () => {
    setupWebpackProject({
      'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './server/index.js',
  plugins: [
    new Plugin({ exclude: /third_party/ })
  ],
};
`,
      'server/index.js': `
import { greeting } from '../client/constants';
console.log(greeting);
`,
      'client/constants.js': `
export * from '../third_party/constants';
`,
      'third_party/constants.js': `
exports.greeting = 'Hi, there!';
`,
    });
    expect(execWebpack().status).toBe(0);
    expectCommonDirToIncludeSameFilesAnd({
      'dist/server/index.js': (t) => {
        expect(t).toInclude('require("../client/constants.js")');
        expect(t).not.toInclude('Hi, there!');
      },
      'dist/client/constants.js': (t) => {
        expect(t).toInclude('require("../../third_party/constants.js")');
        expect(t).not.toInclude('Hi, there!');
      },
    });
    const { stdout, status } = execNode('dist/server/index.js');
    expect(status).toBe(0);
    expect(stdout).toInclude('Hi, there!');
  });
});

describe('with options.longestCommonDir', () => {
  it(
    'uses the specified longest common dir to resolve output paths ' +
      'if the evaluated common dir is longer',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/some/where/index.js',
  plugins: [
    new Plugin({ longestCommonDir: './src' })
  ],
};
`,
        'src/some/where/index.js': '',
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFiles(['dist/some/where/index.js']);
    }
  );

  it(
    'uses the evaluated common dir to resolve output paths ' +
      'if the specified longest common dir is longer',
    () => {
      setupWebpackProject({
        'webpack.config.js': `
const Plugin = require('${rootPath}');
module.exports = {
  ${webpackConfigReusable}
  entry: './src/index.js',
  plugins: [
    new Plugin({ longestCommonDir: './src/some/where' })
  ],
};
`,
        'src/index.js': '',
        'src/some/where/.gitkeep': '',
      });
      expect(execWebpack().status).toBe(0);
      expectCommonDirToIncludeSameFiles(['dist/index.js']);
    }
  );
});
